package AirSimJavaClient;

public class AirSimClient {

}

class AirSimImageType {    
    int Scene = 0;
    int DepthPlanner = 1;
    int DepthPerspective = 2;
    int DepthVis = 3;
    int DisparityNormalized = 4;
    int Segmentation = 5;
    int SurfaceNormals = 6;
}

class DrivetrainType {
    MaxDegreeOfFreedom = 0
    ForwardOnly = 1
    
}

class LandedState {
    Landed = 0
    Flying = 1

}

class Vector3r(MsgpackMixin) {
    x_val = np.float32(0)
    y_val = np.float32(0)
    z_val = np.float32(0)

    def __init__(self, x_val = np.float32(0), y_val = np.float32(0), z_val = np.float32(0)) {
        self.x_val = x_val
        self.y_val = y_val
        self.z_val = z_val
    }
}
    
class Quaternionr(MsgpackMixin) {
    w_val = np.float32(0)
    x_val = np.float32(0)
    y_val = np.float32(0)
    z_val = np.float32(0)

    def __init__(self, x_val = np.float32(0), y_val = np.float32(0), z_val = np.float32(0), w_val = np.float32(1)) {
        self.x_val = x_val
        self.y_val = y_val
        self.z_val = z_val
        self.w_val = w_val
    }

}

class Pose(MsgpackMixin) {
    position = Vector3r()
    orientation = Quaternionr()

    def __init__(self, position_val, orientation_val) {
        self.position = position_val
        self.orientation = orientation_val
    }


}

class CollisionInfo(MsgpackMixin) {
    has_collided = False
    normal = Vector3r()
    impact_point = Vector3r()
    position = Vector3r()
    penetration_depth = np.float32(0)
    time_stamp = np.float32(0)

}

class GeoPoint(MsgpackMixin) {
    latitude = 0.0
    longitude = 0.0
    altitude = 0.0

}

class YawMode(MsgpackMixin) {
    is_rate = True
    yaw_or_rate = 0.0
    def __init__(self, is_rate = True, yaw_or_rate = 0.0) {
        self.is_rate = is_rate
        self.yaw_or_rate = yaw_or_rate
    }

}

class ImageRequest(MsgpackMixin) {
    camera_id = np.uint8(0)
    image_type = AirSimImageType.Scene
    pixels_as_float = False
    compress = False

    def __init__(self, camera_id, image_type, pixels_as_float = False, compress = True) {
        self.camera_id = camera_id
        self.image_type = image_type
        self.pixels_as_float = pixels_as_float
        self.compress = compress
    }


}

class ImageResponse(MsgpackMixin) {
    image_data_uint8 = np.uint8(0)
    image_data_float = np.float32(0)
    camera_position = Vector3r()
    camera_orientation = Quaternionr()
    time_stamp = np.uint64(0)
    message = ''
    pixels_as_float = np.float32(0)
    compress = True
    width = 0
    height = 0
    image_type = AirSimImageType.Scene
}
